
РЕФЕРАТ
     Выпускная квалификационная работа бакалавра выполнена студентом Гунгер А.К.
     Руководитель проекта: старший преподаватель Новицкая Ю.В.
     Тема: «Модернизация веб-сервиса по продаже оборудования».
     Пояснительная записка содержит 64 страницы, 55 рисунков.
     Цель выпускной квалификационной работы бакалавра –   модернизация существующего сайта с применением современных веб–технологий.
     Ключевые слова: МОДЕРНИЗАЦИЯ САЙТА, ВЕБ-СЕРВИС, PHP, JAVASCRIPT, JSON, БАЗА-ДАННЫХ, MYSQL, PHPMYADMIN, HTML, CSS, ВЕБ-СЕРВЕР.
     В рамках выпускной работы рассмотрены аналогичные веб-сервисы, способы и технологии их реализации. Также были изучены основные современные технологии web-программирования.
     В процессе выполнения работы с помощью современных средств реализации веб–сайтов был модернизирован устаревший сайт.
     Решены поставленные задачи:
* Изучен сайт, который требуется модернизировать;
* Сформированы требования по модернизации;
* Проанализированы и выбраны технологии для реализации;
* Разработаны клиентские и серверные части сайта и админ–панели сайта;
* Проведено тестирование модернезироанного веб-сервиса.
     В пояснительной записке дано полное описание поставленных задач и способы их выполнения. При модернизации веб-сервиса использовалось множество технологий и языков: HTML5, SASS, PHP, JS и другие.

Введение
     Современный мир окутан цифровыми технологиями. Сейчас большая часть населения земли обладает доступным выходом в интернет и посещает большое количество сайтов и веб-сервисов – социальные сети, онлайн-магазины, сайты компаний и многое другое. 
     Количество активных пользователей в 2020 году составило 4,5 миллиарда человек, причем уникальных мобильных пользователей насчитывалось 4,18 миллиарда. Список активных пользователей социальных сетей в мире достиг 3,8 миллиарда человек, и почти каждый из них использует социальные сети на мобильных устройствах – 3,75 миллиарда.
     Текущий показатель численности населения планеты составляет 7,76 миллиарда человек. Таким образом, 56% жителей Земли (включая детей) являются активными пользователями Сети. 
     Первый сайт был создан в 1991 году. Последняя статистика интернета в 2020 году говорит, что в мире насчитывается около 1,8 миллиарда действующих сайтов.
     Скорость расширения Всемирной паутины остается стабильной и не показывает никаких признаков замедления [1]. 
     С каждым годом кол-во сайтов только растет, и эта тенденция будет сохранятся всегда, т.к. переход в цифровую эпоху неминуем для каждого и это только вопрос времени.
     Также и технологии, связанные с интернетом, не стоят на месте и каждый год обновляются и заменяются, вследствие чего сайты и веб-сервисы устаревают как внешне, так и технологически, именно поэтому важно раз в несколько лет обновлять внутренности своих сервисов.
     На данный момент сайт компании «Маяк-авангард» устарел и нуждается в обновлении. Именно это является целью моей ВКР – модернизировать сайт компании по продаже оборудования.
1. Постановка задачи
     Целью моей выпускной квалификационной работы является модернизация веб-сервиса по продаже оборудования.
     Сайт компании «Маяк авангард» на сегодняшний день технически и морально устарел. Часть функционала больше не работает, а дизайнерское оформление оставляет желать лучшего. Поэтому данная версия сайта нуждается в модернизации.
     Сайт должен содержать админ-панель, где будет имеется возможность получить доступ ко всем заказчикам продукции, просмотреть статистику заказов на сайте и среднемесячную посещаемость страниц, все запросы будут проходить через базу данных, откуда будут браться значения и уже на стороне сервера обрабатываться для вывода на админ-панель.
     Для реализации задуманной системы потребуется выполнить следующие задачи:
* Изучить сайт, который требуется модернизировать;
* Сформировать требования;
* Проанализировать и выбрать технологию для реализации;
* Спроектировать клиентские и серверные части веб-сервиса;
* Реализовать поставленные цели;
* Провести тестирование.
2. 
Обзор предметной области
2.1. Обзор прежней версии сайта
     Компания «Маяк-авангард» занимается индивидуальной разработкой и производством технологического оборудования для промышленной и пищевой отрасли. Основным источником клиентов компании является веб-сервис, который предоставляет услуги оформления заказов и просмотра доступной информации о продукции и производстве.
     Сайт компании «Маяк-авангард» –  использует стандартные средства разработки, такие как HTML, CSS, JS. Страницы выполнены в старом стиле 2000 – 2010 и на сегодняшний день устарели.
     Исходные файлы проекта находятся в ужасном состоянии и попросту не структурированы. А написанный код подлежит полному рефакторингу, так как он не упорядочен и просто разбросан по файлу. 
     Также на сайте имеется возможность выслать заявку на почту производителя и на данный момент эта функции выдает ошибку страницы. Описанный процесс изображен на рисунке 1.

Рисунок 1 – Ошибка при отправке заявки
     Структура сайта оставляет желать лучшего, некоторые ссылки перестали работать, а почтовые запросы не выполняются. Сайт содержит всего 8 страниц:
* Галерея;
* Ёмкостное оборудование;
* Сироповарки;
* Просеивающее оборудование;
* Диссольверы;
* Бисерные матрицы;
* Реакторы.
     Переходе на любую вкладку страницы занимает большое количество времени вследствие плохой оптимизации медиа контента и перегруженности скриптов. 
     На главной странице располагается каталог позиций, по страницам которых может переходить пользователь. Данные разделы устарели, т.к. товарный ряд поменялся за эти годы и все позиции, представленные на сайте, давно устарели. 
     Контактная информация утеряла свой смысл, так как владельцы, офисы и контактные номера давно поменялись, но так и не обновились на сайте. Главная страница сайта представлено на рисунке 2.

Рисунок 2 – Веб-сервис компании «Маяк авангард»
     
     Раздел галерея потерял свою актуальность и требуется полное обновление фотографий производства и оборудования. Страница «Галерея» представлена на рисунке 3.
     
Рисунок 3 – Страница «Галерея»
2.2. Веб-сервисы
     Веб-сервисы – это автономные, модульные, распределенные, динамические приложения, которые можно описывать, публиковать, размещать или вызывать по сети для создания продуктов, процессов и цепочек поставок. Эти приложения могут быть локальными, распределенными или сетевыми. Веб-сервисы построены на основе открытых стандартов, таких как TCP / IP, HTTP, Java, HTML и XML [3].
     Подобная архитектура предоставляет возможности создания современных сайтов, суть которых предполагает взаимодействие между различными модулями, написанными на стороне сервера, вызываемыми на клиенте и наоборот.
     Также это блок управляемого кода, который можно вызывать удаленно с помощью HTTP [3]. 
     HTTP (протокол передачи гипертекста) – это прикладной протокол передачи данных в сети. На текущий момент используется для получения информации с веб-сайтов. Протокол HTTP основан на использовании технологии «клиент-сервер»: клиент, отправляющий запрос, является инициатором соединения; сервер, получающий запрос, выполняет его и отправляет клиенту результат.
     HTTPS (безопасный протокол передачи гипертекста) – это расширение протокола HTTP, поддерживающее шифрование посредством криптографических протоколов SSL и TLS.
     Чем отличаются HTTP от HTTPS
* HTTPS не является отдельным протоколом передачи данных, а представляет собой расширение протокола HTTP с надстройкой шифрования;
* передаваемые по протоколу HTTP данные не защищены, HTTPS обеспечивает конфиденциальность информации путем ее шифрования;
* HTTP использует порт 80, HTTPS – порт 443 [2].
     То есть блок управляемого кода можно активировать с помощью HTTP-запросов. Веб-сервисы позволяют раскрыть функциональность существующего кода через сеть. После того, как он выставлен в сети, другие приложения могут использовать функциональные возможности вашей программы [3].
3. 
Принципы разработки веб-сервиса
3.1. Стандарты front-end разработки 
     Front-end разработка является важнейшей стадией проектирования веб-сервиса, основная задача – это обеспечить дизайн, который будет привлекать пользователя, а также создать удобное управление и взаимодействие с функциями представленными на сайте. 
     Первым делом создается макет дизайна в сторонних программах, в процессе создания возникают правки и смены приоритетов, которые приходится отражать на макете, этим обычно занимаются дизайнеры. Главное взаимодействие макета и кода происходит через согласование с верстальщиками, которые помогают подобрать более явную и подходящую структура сайта для проекта. И вот когда структура сайта определена – начинается верстка самого сайта, а это значит, что разработчики переносят нарисованный дизайн на реально рабочий прототип, который впоследствии наполняется контентом.
     Стоит отметить, что общение между дизайнерами и верстальщиками не прекращается на протяжение всего жизненного цикла разработки веб-сервиса. 
3.2. Инструменты front-end разработки 
3.2.1. Язык разметки HTML
     HTML – это язык гипертекстовой разметки, который браузер использует для интерпретирования его в веб элементы страниц. Этот язык является стандартом во всем мире. Его используют в каждом проекте связанным с созданием веб-контента. С развитием технологий стандарты данного языка менялись насколько раз и на данный момент основным стандартом является HTML 5.
     Структура HTML каждого документа проста и состоит из тег-элементов, которые определяют положение друг друга в основном окне браузера. Каждый тег может иметь свои параметры и выполнять разные функции отображения. 
     В основном теги бывают двух видов:
* Одиночные: <input>;
* Парные: <div> </div>.
     Каждый тег может иметь несколько атрибутов, которые отвечают за функционал и параметры отображения элемента, они прописываются в открывающем теге. Внутри тегов содержатся другие теги, либо текст, который будет отображаться в элементе.
3.2.2. Стилизация разметки CSS
     CSS – язык таблиц стилей, используемый для формирования внешнего вида веб-страницы. Данный язык в основном используется в связке с HTML кодом. Через CSS имеется возможность задавать различные параметры для графического отображения элементов страницы.
     Основные возможности CSS:
* Изменение Шрифта текста;
* Изменение Цвета текста и элементов;
* Изменение Размеров элементов;
* Изменение Оформления элементов;
* Изменение Поведения элементов;
* Изменение Расположения.
     Само формирование стилей состоят из правил и их параметров. CSS можно прописывать напрямую в HTML документе через обозначающие атрибуты или теги или можно создавать отдельные файлы, которые можно подключить в HTML. Сам файл состоит из селекторов, в которых и расположены правила с параметрами. Впоследствии эти селекторы будут обозначены в тегах нужных элементов в HTML файлов. 
     Применяя CSS, верстальщик может создавать неповторимые паттерны веб-сервисов. Задавая правила, они добиваются изменения формы, цветовой гаммы и расположения элементов, что в итоге даёт более воспринимаемый пользовательский интерфейс.
     Технология CSS появилась позже html и была свежим глотком воздуха для веб-страниц тех времен. Сайты в то время были однотипными, кривыми и монотонными. Впоследствии CSS проходил несколько стадий обновления и на сегодняшний момент актуальной версией является CSS3.
3.2.3. Язык программирования JavaScript
     JavaScript – мультипарадигменный   язык   программирования. 
     Поддерживает объектно–ориентированный, императивный и функциональный стили.
     Современный JavaScript – это «безопасный» язык программирования. Он не предоставляет низкоуровневый доступ к памяти или процессору, потому что изначально был создан для браузеров, не требующих этого.
     В браузере для JavaScript доступно всё, что связано с манипулированием веб–страницами, взаимодействием с пользователем и веб–сервером.
     Например, в браузере JavaScript может:
* Добавлять новый HTML–код на страницу, изменять существующее содержимое, модифицировать стили;
* Реагировать на действия пользователя, щелчки мыши, перемещения указателя, нажатия клавиш;
* Отправлять сетевые запросы на удалённые сервера, скачивать и загружать файлы;
* Получать и устанавливать cookies, задавать вопросы посетителю, показывать сообщения;
* Запоминать данные на стороне клиента («local storage») [4].
3.2.4. Адаптивный дизайн
     Адаптивный дизайн – способность корректного отображения сайта на устройствах с разным разрешением экрана. Веб-страницы с данным свойством используют заранее заложенные механизмы CSS, которые позволяют верстать сайт с учетом динамически изменяющегося расширения окна браузера, что помогает избежать заранее прописанных размеров и параметров элементов для каждого вида диагонали. 
     В современной практике каждый хороший веб-сайт должен быть хорошо адаптирован на персональный компьютер, планшет, смартфон и ноутбук. За счет добавления адаптивности работа верстальщика усложняется в несколько раз, так как ему приходится использовать дополнительные механизмы регулирования положения и размеров веб элементов и проводить их тестирование на разных расширениях и платформах.
     Также и имеется еще ряд недостатков: 
* Размер подгружаемого CSS и JS будет больше, за счет дополнительного функционала, направленного на адаптивность;
* Соответственно время разработки будет сильно больше, чем у сайта без адаптивной верстки.
3.3. Стандарты Back-end разработки 
     Ранее были обговорили стандарты front-end разработки, которая должна предоставлять корректный и понятный интерфейс, но интерфейс должен работать с какими-то данными, именно здесь приходит на помощь back-end разработка.
     Back-end разработка – это набор аппаратно-программных средств, при помощи которых реализуется логика работы сайта. Попросту говоря, это то, что скрыто от глаз пользователя и происходит вне его браузера и компьютера [5]. Там происходит обработка данных, в том числе из базы данных и тех, что приходят на сервер от клиента.
     Сутью back-end является объединение сервера с пользователем и самым популярным инструментом для создания этой связи является PHP.
3.4. Инструменты и методы Back-end разработки 
3.4.1. Язык программирования PHP
     Язык HTML дает достаточный функционал для создания веб-страниц, но все-таки это не язык программирования и обратится к базе данных или написать простое математическое выражение через него невозможно. На помощь HTML приходит PHP – Hypertext Preprocessor, данный инструмент является языком программирования, чаще всего его называют серверным.
     Основной задачей PHP является внедрение обрабатываемых веб-элементов в html код, чтобы HTML не представлял собой статический интерфейс. А при помощи PHP программист может выводить или записывать данные БД, обрабатывать условия и запросы JSON, а также именно PHP дает возможность взаимодействия с данными на странице. 
     Главным преимуществом данного серверного языка является модульность и встраиваемость в HTML код, что в совокупности дает простое интегрирование PHP на сайт. Именно поэтому PHP находится на 8й строчке в списке самых популярных языков программирования. [10]
3.4.2. Взаимодействие Back-end и front-end
     Взаимодействие frontend и backend происходит по кругу: frontend отправляет пользовательскую информацию в backend, там она обрабатывается и возвращается обратно, приняв понятную форму.
     Как правило, этими видами работ занимаются разные специалисты, но каждому из них желательно понимать принципы, по которым работают коллеги. К примеру, дизайнеру интерфейсов важно хотя бы в общих чертах знать, что представляет собой backend проекта, которым он занимается. Это поможет ему адекватно оценить, какие технические возможности могут быть у сайта или приложения.
     Существует несколько вариантов взаимодействия frontend и backend:
* HTTP-запрос напрямую отправляется на сервер, сервер ищет информацию, встраивает ее в шаблон и возвращает в виде HTML-страницы;
* Вариант с использованием инструментария AJAX (Asynchronous JavaScript and XML). В этом случае запрос отправляет JavaScript, загруженный в браузер, а ответ приходит в формате XML или JSON;
     Как можно увидеть, современная разработка – это сложный и многоуровневый процесс, который делится на две части: клиентскую и серверную. В арсенале frontend- и backend-программистов есть масса инструментов, выбор которых зависит от поставленных задач и сложности проекта. Оба вида разработки включают в себя технические и творческие компоненты [6].
3.4.3. База данных и СУБД
     Для обработки информации на back-end используются данные и чаще всего нужно какое-то хранилище где все нужные массивы информации будут упорядоченно хранится. Подобными задачами занимается база данных, именно она предоставляет упорядоченную структуру хранения данных, которые имеют определенные правила для упрощения доступа к записанной информации.
     Но БД отвечает только за хранение информации в себе, для доступа к данным внутри используются системы управления базами данных или СУБД.
     Данное ПО организует доступ к внутренним параметрам и данным БД. Именно через этот управляющий орган осуществляется связь отображения данных и самих данных. 
     Через СУБД имеется возможность:
* Записывать данные;
* Читать данные;
* Изменять данные;
* Удалять данные.
     Поэтому любой большой веб-сайт использует базы данных, так как через их трафик проходит огромное количество информации, которая впоследствии пригодится для дальнейшего использования ресурсом.
3.4.4. MySQL
     Что касается общего определения, MySQL это система управления реляционными базами данных с открытым исходным кодом (СУРБД) с моделью клиент-сервер. СУРБД – это программное обеспечение или служба, используемая для создания и управления базами данных на основе реляционной модели [7]. 
     По сути своей данная система базируется на сервера, то есть все данные записываются на сервер БД, и чтобы получить к ним доступ – программист должен обратиться к серверу MySQL. Как раз для общения с MySQL используется серверный язык программирования –  PHP.
     Процессы, происходящие в среде MySQL:
* Система создает базу данных для хранения информации (ее сортировки, идентификации и т.п.);
* Клиенты (другие компьютеры в сети) подают запросы к базе с помощью специфичных для SQL команд;
* Серверное приложение обрабатывает запрос и выдает ответ клиенту (выдает запрашиваемые данные) [7].
4. 
Разработка веб-сервиса:
4.1. Функциональные требования
     Для модернизации сайта, требуется переписать практически все, так как старая версия сайта не удовлетворяет условиям современного UI. А это значит, что под полное редактирование попадает вся структура веб-элементов и все стили сайта.
     На данный момент функционал сайта позволяет только просматривать информацию о товарах, контактах и фотографии производства. Для пользователей и сотрудников этой функциональности будет мало, поэтому стоит описать новые функции, которые будут реализованы на сайте.
     Таким образом все элементы UI для взаимодействия с данными будут переписаны и реструктуризированы или делегированы на отдельные страницы. Также ранее оговаривалась, что функции обработки и отправки данных через эти элементы не работают, а значит, что все функции отправки тоже подвергаются редактированию и переосмыслению. 
     Также в следствие роста компании у веб-сервиса должна появится админ-панель, где менеджеры и маркетологи должны получать основную информацию о посещениях, заказах и популярности товаров.
     В следствие переосмысления сущности данных, добавляются инструменты, которые будут структурированно хранить эти данные и давать возможность обращается к ним, для этого добавим админ-панель, которая и будет предоставлять доступ к хранящимся данным.
4.2. Инструменты реализации
     Для модернизации сервиса понадобится набор инструментов, который подходит для быстрой и легкой разработки, а также придётся использовать часть старых скриптов, написанные на части сервиса, который не подразумевается переносить на новые технологии.
     Итак, для создания правильной верстки придётся использовать HTML 5, данная технология зарекомендовала себя как самое простое и быстрое решение, без лишних имплементаций и пристраивания сторонних технологий.
     Для создания дизайн составляющей будет использоваться CSS3 в качестве промежуточной технологии, так как данный язык не очень удобен при разработке большого объема стилей, будет использован препроцессор SASS, который расширяет возможности стандартного CSS и привносит множество новых функций, которые непременно пригодятся при разработке.
     Соответственно в связке с HTML выгодно использовать JavaScript, так как он легко встраивается в код веб-элементов и дает возможность глубокого обхода по DOM-дереву, что в свою очередь предполагает легкое взаимодействие с элементами UI. Также JS отлично подходит для обработки пользовательских данных и создания JSON-объектов.
     Все выше сказанное будет использовано для реализации клиентской части сервиса. 
     Теперь стоит уделить внимание технологиям, которые организуют серверное пространство.
     В первую очередь выбор падает на скриптовый язык программирования PHP. Он является самым предпочтительным для веб-разработчиков, так как он простой в изучении и использовании, а также отлично работает с HTML, который может непосредственно встраиваться прямо в код. Через PHP можно совершать SQL-запросы к базе данных и обрабатывать их на стороне сервера, после чего также легко организовывать их отправку на клиента.
     Для отображения статистических графиков используется API от Google. Речь идет о google charts, данная технология позволяет отображать различные диаграммы и графики. Серверу достаточно сформировать пакет параметров и значений и просто отправить их на сервис, а он в свою очередь вышлет веб-элемент, в котором будет составлен интерактивный график.
     В качестве СУБД выбираем MySQL, который предоставляет легкую и понятную структуру хранения данных, а также она поддерживает транзакции на уровне отдельных записей и множество других функций.
     Для общения клиента и сервера используется технология AJAX, так как позволяет быстро и легко передавать любые данные на сервер.
     А для удобного управления MySQL на уровне проектирования БД будет использоваться веб-приложение PhpMyAdmin, которое позволит быстро просматривать таблицы, записи и другую информацию о БД, также там присутствует множество полезных функций:
* Просмотр логов;
* Редактирование БД через UI;
* Создание запросов;
* Экспорт/импорт БД;
* Создание процедур и триггеров.
4.3. Системные требования
     Для самой разработки программный комплекс, который будет содержать нижеперечисленные технологии. Этого будет достаточно для всего цикла разработки.
     В качестве веб-сервера будет взят Apache, а надстройкой для него будет являться программный комплекс OpenServer так как он бесплатный и в нем уже произведены настройки для корректной работы сервера.
     А для того, чтобы можно было в полную меру использовать возможности сайта, следует его поместить на сервер размещенный в сети интернет, для этого понадобятся услуги хостинг-компании, также хостинг должен предоставлять данные инструменты:
* СУРБД MySQL;
* Веб-сервер Apache;
* Веб-приложение PhpMyAdmin;
* Поддержка SMTP.
5. 
Проектирование
5.1. Проектирование клиентской части сайта
     Структура страниц сайта содержит всего 2 части: шаблонную информационно-навигационною панель или шапку, и основной frame где располагается весь полезный контент страницы.
     Навигационный веб-элемент предполагает наличие кнопок, ссылающихся на следующие разделы сайта:
* Главная;
* Каталог;
* Контакты;
* Заказать;
* Производство.
     Главная страница является начальной и содержит основную информацию о компании «Маяк-авангард». Также на этой странице располагаются разделы с категориями продукции и лучшими товарами, которые предлагает компания. Имеется и контактная информация с подключенной картой, которая показывает расположение офиса и комплекса компании.
     При переходе в раздел «Каталог» нас перенаправляет ниже по странице к веб-элементу содержащему категории производства и лучшие товары.
     При переходе в раздел «Контакты» нас перенаправляет ниже по странице к веб-элементу, содержащему контактную информацию и местоположение объектов компании.
     Для более удобного и заманчивого предложения баннеры с качествами компании были вынесены в единый веб-элемент и прописаны прокручивающие функции, что помогло привлечь внимание и сохранить место на веб странице.
     Также была полностью изменена цветовая палитра сайта, с темно-синего на бордовый, чтобы подчеркнуть тематический цвет компании, изображенный на логотипе. 
     Раздел галерея был переименован в производство и полностью переработан с соблюдением всех стандартов современного UE/UX. Там располагаются фотографии цехов и оборудования, которое компания производит, а также страница содержит описание и информацию о производственном процессе.
     Переходя в раздел каталог представляется 2 категории оборудования:
* Пищевое;
* Промышленное.
     При нажатии на одну из категорий – пользователя переносит на страницу товаров, где представлены различные разделы оборудования выбранной категории, для пищевого оборудования предстают следующие разделы:
* Сушка/рассев;
* Сироповарки;
* Ёмкости;
* Дозирование/смешивание;
     А для промышленного оборудования имеются данные разделы:
* Вибросито;
* Деревообработка;
* Станции затаривания;
* Транспортирующее оборудование;
* Реакторы;
* Ёмкости;
* Сушка;
* Пивные котлы;
* Диссольверы.
     После перехода в раздел оборудования перед пользователем предстают характеристики, фото и описание каждой позиции. При этом имеется отдельный элемент для просмотра информации и отображения всех позиций, и при нажатии выводится характеристики выбранной позиции.
     Последним разделом является «Заказать», он был модернизирован. В прежней версии в данном разделе предлагали заказать ёмкостное оборудование в зависимости от индивидуальных параметров, введённых пользователем. Теперь там имеется возможность заказать не только ёмкостное оборудование, но и другие позиции, предлагаемые компанией.
5.2. Проектирование серверной части сайта 
     Для новой версии сайта понадобится организовать отправку сообщений с заявками на почту компании. Для этого придётся каким-то образом общаться с серверным языком программирования PHP. Тут поможет AJAX подход с JSON.
     JSON – текстовый формат обмена данными, основанный на JavaScript. Как и многие другие текстовые форматы, JSON легко читается людьми. Формат считается независимым от языка и может использоваться практически с любым языком программирования [8].
     При этом будет использован AJAX, который является подходом к построению интерактивных пользовательских веб-приложений. Его основной принцип заключается в «фоновом» обмене данными браузера с веб-сервером.
     При помощи AJAX и JSON формируется через JavaScript объект с данными о заявке, который содержит всю информацию, которую пользователь ввёл в интерактивных полях. 
     Также в проекте используется FETCH. Он позволяет делать запросы, схожие с XMLHttpRequest (XHR). Основное отличие заключается в том, что Fetch API использует Promises (Обещания), которые позволяют использовать более простое и чистое API, избегая катастрофического количества callback'ов [9]. По своей сути является аналогом AJAX.
     После чего клиент отправляет данный запрос, где его ожидает PHP скрипт, который обрабатывает этот запрос и используя библиотеку и SMTP протокол –  отправляет сформированное сообщение на почту компании.
     На рисунке 4 изображена схема взаимодействия сервера и клиента при помощи JSON.

Рисунок 4 – Схема обмена данными клиента и сервера
5.3. Проектирование админ–панели сайта
     Для создания админ-панели, будем использовать PHP в котором опишем саму структуру веб-элементов, стили и логику поведения. На этой странице нужно отображение и редактирование ранее сохраненных пользовательских данных, а также их обработка и вывод статистики по заказам. Для решения этой задачи отлично подойдет библиотека mysqli, которая позволит установить соединение с базой данных и даст возможность отправлять запросы и получать данные из таблиц.
     Также для формирования статистических данных используется api – google charts.
     Весь функционал будет представлен в одном файле, так как язык PHP может позволить использовать себя в качестве веб-страницы, и чтобы не усложнять структуру админ-панели.
     По сути будет отправляться запрос на выполнение функции и страница будет перезагружается с уже внесенными в нее изменениями, что очень удобно и не придётся использовать сторонние библиотеки или Фреймворки.
5.4. Структура базы данных 
     Для хранения данных об активности пользователей будет использоваться БД, которая имеет в себе 3 таблицы:
* Users;
* comments;
* Visiters;
* orders.
     Общая структура БД представлена на рисунке 5.
     
Рисунок 5 – Структура БД для сайта
     Таблица Users имеет 4 поля:
* id – уникальный идентефикатор записи;
* name – имя пользователя;
* mail – почтовый адресс пользователя;
* number – номер телефона пользователя.
     Данная таблица используется для записи каждого пользователя, когда те совершают действия связанные с отправкой заявки или обращением на почту через сайт.
     Таблица comments имеет 3 поля:
* id – уникальный идентефикатор записи;
* comment – сообщение пользователя;
* user_id – связывающий идентефикатор пользователя.
     Эта таблица используется для записи каждого сообщения, когда пользователи отправляют сообщение через функционал сайта.
     Таблица orders имеет 5 полей:
* id – уникальный идентефикатор записи;
* product – позиция которая была заказана;
* item – модель оборудования;
* date – дата отправки заявки;
* user_id – связывающий идентефикатор пользователя.
     Таблица orders используется для хранения данных при создании заявки на оборудование, они отправляются на почту, а также фиксируются в базе данных. 
     Таблица visiters имеет 7 полей:
* name – уникальное сгенерированное имя посетителя;
* location – геологкация посетителя;
* ip – ip-адрес посетителя;
* browser – наименование используемого браузера;
* system – операционная система пользователя;
* date – дата посещения;
* amount – количество посещений.
     Таблица visiters используется для хранения данных при посещении незарегистрированных пользователей, в дальнейшем эти данные будут использоваться для написания статистических модулей.
6. 
Реализация
6.1. Верстка сайта
     Верстка сайта происходила в html документах, где структурированно размещались веб-элементы, которые в последствии отображаются на странице. Туда же помещался контент сайта (текст, ссылки, изображения). Далее элементам прописывались стилистические классы, которые отсылали к файлам CSS, где были описаны основные стили для каждого веб-элемента страницы.
     В результате верстки были созданы следующие веб-страницы:
* Главная;
* Производство;
* Заказать;
* Категория;
* Товары;
* Пищевое/технологическое оборудование;
* Админ-панель;
* Страница товаров.

Рисунок 6 – Главная страница сайта
     На всех страницах имеется шаблонная шапка сайта, которая содержит контактную информацию и навигационные кнопки, данная панель изображена на рисунке 7.

Рисунок 7 – Навигационная панель
     Для более отзывчивого интерфейса, при выборе какого-либо пункта навигационного меню этот пункт окрашивается в красный цвет.
     HTML-код навигационного меню представлен на рисунке 8.

Рисунок 8 – HTML-Код навигационного меню
     Как видно из кода, каждый веб-элемент пункта содержит в себе картинку для более простой ассоциации с названием раздела и само название раздела прописанного в теге «a», который исполняет функцию пересылки при нажатии на элемент.
     Также на главной странице расположен блок каталога, где представлены основные категории товаров и при нажатии пользователя перенаправляет на страницу с более подробным описанием каждой позиции категории.

Рисунок 9 – Блок каталога
     На рисунке 1- представлен код блока пищевой категории из каталога, который состоит из элемента названия, картинки оборудования в теге «img» и описания.
     
Рисунок 10 – HTML-код одной категории
     На странице «Производство» расположена основная информация о компании и фотографии с цехов, где отображается профессиональная работа при создании и транспортировке различного оборудования. Данная страница представлена на рисунке 11.

Рисунок 11 – Страница «Производство»
     В данном разделе представлены медиа материли, которые помогают понять, какого уровня компания и создать элемент доверия для клиента. 
     В коде этой странице в основном используется тег «div» с параметром стиля «background-image» для отображения изображений на странице. Часть кода представлен на рисунке 12.
     
Рисунок 12 – HTML-код изображений на странице «Производство»
     Страница «Заказать» представлена на рисунке 13. Она отвечает за составление заявки на оборудование по индивидуальным параметрам. На ней отображены элементы для выбора категории оборудования, а также различные поля для ввода информации.

Рисунок 13 – Страница «Заказать»
     HTML-код со страницы «Заказать» изображен на рисунке 14, он отвечает за отображение вариантов категорий, которые доступны для индивидного заказа.

Рисунок 14 – HTML-код выбора категории
     Ниже на рисунке 15 изображена страница «Технологическое оборудование» на ней отображаются весь список оборудования для данной категории и при нажатии на одну из них пользователя перенаправляет на страницу выбранного им оборудования.

Рисунок 15 – HTML-код выбора категории
     HTML-код для отображения карточки категории изображен на рисунке 16.
 Рисунок 16 – HTML-код отображения одной категории
     Основной странице, которая отображает суть производства компании является страница какой-либо категории, которая отображает основную информации по каждой позиции товара, а также дает возможность тут же оформить заявку на выбранное оборудование.
 Рисунок 17 – HTML-код выбора товара
     HTML-код веб-элемента для отобраджения характеристик по выбранному оборудованию представлен на рисунке 18.
     
     Рисунок 18 – HTML-код шаблона выбраной позиции
     Смена отображаемых характеристик происходит по нажатию на другую позицию. Код для смены этих данных представлен на рисунке 19.
     
     Рисунок 19 – Код для смены товара на панели характеристик
     Для просмотра информации о товаре была написана система получения информации из свойств веб-элементов, которые содержали в себе характеристики, изображение и описание товара. Такой веб-элемент изображен на рисунке 20.
     
     Рисунок 20 – Веб-элемент одной из позиций категории реактор
     Чтобы получать данные о посещениях и статистику по сайту была сверстана админ-панель, которая состоит из панели управления с кнопками различного функционала, полем параметров и рабочим окном, где отображаются запрошенные данные. Данная страница представлена на рисунке 21.
     
     Рисунок 21 – Веб-элемент одной из позиций категории реактор
     Код отвечающий за отрисовку функционального меню представлен на рисунке 22.
     
     Рисунок 22 – Код для отображения функционального меню
     Для реализации окна данных был использован серверный язык программирования PHP. В коде реализованы модульные функции данных элементов, которые получают только данные из базы данных и пространство имен столбцов. Данные функции путем перебора модульно отрисовывают каждый элемент таблицы. Код данной реализации представлен на рисунке 23.
     
     Рисунок 23 – Код модульных функций элементов таблицы
6.2. Реализация клиентской части сайта
     На веб-сервисе расположены блоки с отправкой форм на почту компании, где предоставляется возможность заполнить личные данные и комментарий к запросу и сайт сам отошлет эти данные в PHP-скрип по средству POST-метода, а уже там скрип сформирует объект, содержащий HTML-код с данными клиента и отправит его на почту компании.
     На рисунке 24 представлен JavaScript код, который формирует объект для отправки. Он состоит из объекта, который забирает данные из веб-элементов, используя DOM-модель страницы, после чего помещает их в объект-отправки и производит отправку по адресу /php/mail.php. Также тут присутствует проверка на завершенность, и если она не проходит, то пользователю всплывает окно ошибки, которое сигнализирует о неисправности при отправке. 
     
     Рисунок 24 – Скрипт отвечающий за отправку объекта PHP-скрипту
     Похожий скрипт используется при отправке заявки на определённое оборудование со страницы категории представленной на рисунке 17. Код скрипта изображен на рисунке 25. Тут он не просто формирует объект на основе данных пользователя, но также присоединяет туда данные о выбранном товаре (Название, категория, картинка), чтобы человеку, просматривающему эту заявку, было сразу понятно, на какой товар она была отправлена.
     
     Рисунок 25 – Код скрипта отвечающий за формирование объекта со страницы «Категория».
6.3. Реализация серверной части сайта
     На рисунке 26 изображена функция принятия данных, формирования сообщения и отправки его на почту. Задачей данного скрипта является отправка сообщения на почтовый адрес компании, а также занесения личных данных пользователя в базу данных. Помимо всего перечисленного туда помещаются данные о каждой заявке и каждом заказе с сайта.
     
     Рисунок 26 – Скрипт, отвечающий за отправку сообщения на почту
     Далее идет похожий скрип, но более расширенный на отправку заявки на почту компании. Он изображен на рисунке 27. Данный код примечателен тем, что тут формируется HTML-код в сообщении, а не записывается обычный текст.
      Рисунок 28 – Скрипт отвечающий за отправку заявки на почту
     Также теперь на сайте присутствует сборщик данных посетителей, для расчета статистики посещений и продаж. Эти занимается файл dataCollector.php в нём описаны основные функции, которые парсят и собирают следующие данные:
* Ip пользователя;
* Регион проживания;
* Браузер;
* Операционная система;
* Дата посещения;
* Количество посещений.
     Основные данные предоставляет HTTP_USER_AGENT, который содержит информацию о браузере, системе и другое. А для определения геолокации приходится получать ip пользователя и прогонять его через API сайта geoplugin. Данный процесс изображен на рисунке 29.
     
Рисунок 29 – Функция для получения местоположения
     Основная функция для получения и обработки этих данных представлена на рисунке 30.

Рисунок 30 – Функция для получения и записи данных о пользователе
6.4. Реализация админ–панели сайта 
     Для реализации админ-панели использовался серверный скриптовый язык программирования PHP. Сама страница предоставляет несколько функций:
* Отображение пользователей;
* Отображение заказов;
* Отображение статистики;
* Параметризация группировки.
     Страница админ-панели представлена на рисунке 31.
     
     Рисунок 31 – Админ-панель
     Для отображения всех пользователей, которые отправляли какие-либо данные на почту компании имеется специальная кнопка, которая выдает список пользователей. Данная страница изображены на рисунке 32.
     
     Рисунок 32 – Страница пользвателей
     Для отображения используется простой PHP-код, Формирующий HTML-элементы, в зависимости от информации, которая получена из базы данных. Часть скрипта показан на рисунке 33.
     
     Рисунок 33 – Часть скрипта формирующая элемент с данными
     Чтобы получить данные из БД, сначала нужно подключится к ней и произвести правильный запрос, именно эти занимается часть скрипта, представленного на рисунке 34.
     
     Рисунок 34 – Часть скрипта получающая данные из БД
     Страница для отображения заказов представлена на рисунке 35. Она формируется по таким же правилам, как и получение пользователей.
     
     Рисунок 35 – Страница заказов
     Данные для формирования элементов страницы также берутся из БД, но текст запроса выглядит немного по-другому. Часть PHP-скрипта, отвечающая за получение данных о заказах представлена на рисунке 36.
      
     Рисунок 36 – Часть скрипта отвечающая за получение данных о заказах
     Для получения данных с уточнением используется запрос с параметром, в данном случает справа расположено поле ввода куда вписывается нужный телефон, и админ панель выводит всю информацию по выбранному клиенту. Результат работы данной функции приведён на рисунке 37.
     
     Рисунок 37 – Результат работы поиска данных по номеру телефона
     Страница для отображения статистических данных сайта представлена на рисунке 38.
     
     Рисунок 38 – Страница статистики
     Для вывода полной статистики используется большое количество графических методов, но основные данные страница получает при помощи функции getStatistics. Данная функция написана на PHP и представлена на рисунке 39. 
     Внутри функции происходит подключение к таблице «visiters» и формирование запросов. После чего в переменные записываются данные и помещаются в ассоциативный массив. В конце эти данные отправляются через параметры в графические функции, которые отображают их на странице. 
     
     Рисунок 39 – Метод для получения статистики
     Описанный ранее графический метод представлен на рисунке 40.
     
     Рисунок 40 – Метод для отображения данных на странице
     Для визуализации статистических данных было использовано API от компании «Google» которое было интегрировано в PHP-код. Результат работы этого модуля представлен на рисунке 41.
     Рисунок 41 – Диаграммы в разделе статистика
     Для построения стоит лишь отправить запрос с нашими параметрами из базы данных и получить в ответе готовый график. Код представлен на рисунке 42.
     
     Рисунок 42 – Код для построения круговой диаграммы

Тестирование и размещение
6.5. Тестирование взаимодействия БД и сайта 
     В результате реализации сервиса и админ-панели было проведено тестирование основных функций:
* Запись пользователя;
* Запись информации о заявке;
* Запись информации о заказе;
* Получение данных о пользователях;
* Получение информации о заявках;
* Получение информации о заказах;
* Получение данных по параметрам;
* Запрос статистики.
     Заполнение полей контактными данными и комментарием для связи с менеджерами компании изображено на рисунке 43. 

     Рисунок 43 – Заполненение полей данными
     В базу данных отправляется информация об имени человека, его телефоне и почте, а также комментарий клиента. Теперь, после того, как данные были помещены в таблицу «users» можно их наблюдать в данной таблице под id = 84, на рисунке 44.
     
     Рисунок 44 – Данные пользователя в БД
     А комментарий помещается в другую таблицу, и можно его наблюдать на рисунке 45 под id = 53.
     
     Рисунок 45 – Сообщение пользователя в БД
     Теперь открываем админ панель и находим пользователя по номерку телефона. Данный процесс показан на рисунке 46.
     
     Рисунок 46 – Поиск пользователя в БД по параметру
     На рисунке 47 изображен процесс заполнения полей для отправки заявки на выбранное оборудование.
     
     Рисунок 47 – Отправка заявки на выбранные реактор
     В базу данных записывается пользователь, а также данные о заявке:
* Категория;
* Товар;
* Клиент;
* Сообщение;
* Дата произведения заявки.
     После этого менеджер может получить данные об этом заказе через админ-панель сайта. Достаточно просто ввести номер телефона клиента, и серверная часть сгенерирует запрос и выдаст результат. Данный процесс представлен на рисунке 48.
     
     Рисунок 48 – Поиск данных о заказе по номеру телефона
     Также имеется возможность получения статистики за месяц, она показывает количество пользователей, количество заказов и конверсию. Результат выполнения функции можно увидеть на рисунке 49.
     
     Рисунок 49 – Статистика сайта
     
6.6. Тестирование SMTP отправки почтовых сообщений
     Оставленная ранее заявка с главной страницы – отправляется на почту и теперь менеджер компании может наблюдать её в новых сообщениях на корпоративной почте. Данное сообщение можно наблюдать на рисунке 50.
     
     Рисунок 50 – Сообщение пользователя
     Для отправки использовался протокол SMTP и серверный язык программирования PHP с использованием встроенной функции отправки почтовых сообщений. А результат в виде сообщения на корпоративной почте представлен на рисунке 51.
     
     Рисунок 51 – Сообщение о заявке на товар
     Как видно из рисунка 51, менеджер получает четкую заявку, которая дает понять что клиент хочет заказать и какие вещи поменять.
6.7. Тестирование сайта
     Для просмотра информации о товаре была написана система получения информации из свойств веб-элементов, которые содержали в себе характеристики, изображение и описание товара.
     На странице присутвует 2 товара, при нажатии на 1 из товаров в панель просмотра должно отобразится изображение выбранного товара и данные о нём. Такая панель с информацией представленна на рисунке 52.
     
     Рисунок 52 – Страница с товарами и информацией о них
     За смену этих данных отвечает скрипт написанный на JavaScript.
     Для оформления заказа, который после отправки отправится на корпоративную почту менеджеру, используются поля ввода и выборочное меню. Пользователь выбирает нужную ему категорию, а после заполняет предложенную форму. Подобная операция представлена на рисунке 53.
     Сайт предоставляет выбор следующих типов оборудования:
* Вибросито;
* Ёмкость;
* Дозатор;
* Конвейер;
* Диссольвер/Реактор.
     

     Рисунок 53 – Страница оформления заявки по параметрам
     Для каждого типа оборудования предоставляются индивидуальные параметры для заполнения.
     Далее серверный скрипт, написанный на PHP принимает данные с клиента и на их основе формирует сообщение, а после отправляет его на корпоративную почту. И отправленная заявка теперь пришла на почту и ожидает прочтения дальнейшей обработки. Результат работы отправления заявки представлен на рисунке 54.
     
     Рисунок 54 – Сообщение о заявке по категории
     
6.8. Размещение веб-сервиса
6.8.1. Веб-сервер
     Одним из важных аспектов веб программирования является веб-сервер, который отвечает за прием обработку и отправку HTTP сообщений.
     HTTP – попросту протокол для передачи произвольных данных и является основным средством общения клиент-сервер.
     В первую очередь веб-сервер – это просто компьютерная программа и ее можно установить на любой компьютер. Он общается с клиентом, которым в большинстве случаев является браузер, который отправляет запросы на получение ресурсов через URL-адреса.
     Под ресурсами могут подразумеваться:
* HTML-страницы;
* Изображение;
* Файлы;
* Медиа-потоки.
     Соответственно веб-сервер отправляет эти данные клиенту по средствам протокола HTTP.
6.8.2. Хостинг
     Хостинг – услуга, которая предоставляет пространство для хранения информации на сервере, который постоянно работает и имеет доступ к сети интернет. Именно там размещаются файлы HTML, CSS, JS, PHP, БД и другие. Данная услуга является очень важной в среде веб-сайтов, ведь практически весь трафик интернета обрабатывается и хранится именно на серверах хостинг-компаний, поэтому можно получить доступ к сайтам в любой момент времени.
     В качестве хостинг сервиса был выбран продукт компании «Макхост». Он идеально подходит и удовлетворяет все нужные требования для размещения веб-сервиса.
     В качестве доменного имени было выбрано mayak-avangard.ru.
     Для полой работы сайта на хостинге была настроена и заполнена база данных, а также протокол SMTP [11].
     Размещенный веб-сервис компании «Маяк-авангард» изображен на рисунке 55.
     
     Рисунок 55 – Размещенный сайт
     

Заключение
     Согласно цели выпускной квалификационной работы бакалавра была произведена модернизация сайта компании «Маяк-авангард» с применением современных инструментов и технологий веб-разработки. В том числе были добелены и протестированы новые функции и страницы, а также админ-панель, позволяющая просматривать и редактировать данные оставленные пользователями и потенциальными клиентами. 
     Были рассмотрены современные средства разработки и технологии для разработки веб-сервисов и выбраны наиболее подходящие для модернизации сайта.
     В ходе выполнения выпускной работы был выполнен анализ существующей версии веб-сервиса, после была проведена работа по формированию требований к модернизации сайта. Учтя все сформированные требования были выбраны наиболее подходящие инструменты реализации разработки веб-сервиса. Для реализации интерфейса клиентской части был выбран язык гипертекстовой разметки HTML, каскадные таблицы стилей CSS, а для реализации функциональной части сайта был выбран скриптовый язык JavaScritp. Серверная часть веб-сервиса была выполнена на серверном скриптовом языке PHP. В качестве хранилища данных была выбрана технология MySQL, под управлением PhpMyAdmin.
     Итогом выпускной квалификационной работы является модернизированный веб-сайт компании «Маяк-авангард», который стал более привлекательным по сравнению с предыдущей версий с точки зрения дизайна. Также веб-сервис получил более современный функционал, базу данных для хранения информации о клиентах и админ-панель с статистическим модулем сбора и анализа данных о посетителях.


Список использованных источников

Приложение

41





